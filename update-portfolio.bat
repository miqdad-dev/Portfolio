@echo off
:: Portfolio Auto-Update Script (Windows)
:: This script syncs projects from GitHub and commits changes

echo üöÄ Portfolio Auto-Update Script
echo ===============================

:: Check if we're in a git repository
if not exist ".git" (
    echo ‚ùå Not a git repository. Please run this script from your portfolio root directory.
    exit /b 1
)

:: Check if Node.js is available
where node >nul 2>nul
if %errorlevel% neq 0 (
    echo ‚ùå Node.js is not installed. Please install Node.js to run the sync script.
    exit /b 1
)

:: Check if sync script exists
if not exist "sync-projects.js" (
    echo ‚ùå sync-projects.js not found. Please ensure the script is in the current directory.
    exit /b 1
)

echo ‚ÑπÔ∏è Checking git status...
git diff --quiet HEAD
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è You have uncommitted changes. Please commit or stash them before running this script.
    echo Uncommitted files:
    git status --porcelain
    exit /b 1
)

echo ‚ÑπÔ∏è Fetching latest project data from GitHub...

:: Run the sync script
node sync-projects.js
if %errorlevel% neq 0 (
    echo ‚ùå Failed to sync project data
    exit /b 1
)

echo ‚úÖ Successfully synced project data

:: Check if projects.json was updated
git diff --quiet projects.json
if %errorlevel% equ 0 (
    echo ‚ÑπÔ∏è No changes detected in projects.json
    echo Portfolio is already up to date! üéâ
    exit /b 0
)

echo ‚ÑπÔ∏è Changes detected in projects.json

echo.
echo üìã Changes in projects.json:
git diff --stat projects.json

echo ‚ÑπÔ∏è Staging changes...
git add projects.json

echo ‚ÑπÔ∏è Creating commit...

:: Create commit message
for /f "tokens=*" %%i in ('node -e "console.log(require('./projects.json').totalProjects)"') do set PROJECT_COUNT=%%i

git commit -m "üîÑ Auto-update: Sync projects from GitHub" -m "" -m "- Updated projects.json with latest repository data" -m "- Total projects: %PROJECT_COUNT%" -m "- Last updated: %date% %time%" -m "" -m "ü§ñ Generated with automated sync script"

echo ‚úÖ Changes committed successfully!

echo.
set /p PUSH_CHOICE="üöÄ Push changes to remote repository? (y/N): "
if /i "%PUSH_CHOICE%"=="y" (
    echo ‚ÑπÔ∏è Pushing to remote repository...
    git push
    if %errorlevel% equ 0 (
        echo ‚úÖ Changes pushed successfully!
        echo.
        echo üåê Your portfolio has been updated!
        echo    GitHub: https://github.com/miqdad-dev/Portfolio
        echo    Website: https://miqdad-dev.github.io/Portfolio/
    ) else (
        echo ‚ùå Failed to push changes
        exit /b 1
    )
) else (
    echo ‚ÑπÔ∏è Changes committed locally but not pushed to remote
    echo Run 'git push' when you're ready to deploy the changes
)

echo.
echo ‚úÖ Portfolio update completed! ‚ú®
pause